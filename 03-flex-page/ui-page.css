.header {
  display: flex;
  /* justify-content: space-between; */
  align-items: center;
  height: 80px;
  padding: 0 1rem;
}

/* .header에 justify-content: space-between; 대신 사용 가능 */
/* .search-form {
  margin-left: auto;
} */

@media (max-width: 424px) {
  .menu-link {
    font-size: 1rem;
  }
}

.search-form {
  width: 300px;
  max-width: 60%;
  margin-left: auto;
  margin-right: 3rem;
}

.primary {
  padding: 1rem;
}

.secondary {
  padding: 1rem;
}

.secondary-a {
  background: white;
}

.secondary-b {
  color: white;
  background: #666;
}

/* footer */
.footer {
  padding: 1rem;
  border-top: 1px solid lightgray;
  text-align: center;
}

.modal {
  display: none;
  top: 80px;
}

#modal-switch {
  font-size: 2rem;
}

#modal-switch:checked ~ .modal {
  display: flex;
}

/* 
  버튼이니 inline-flex로 하면 더 좋겠네요, 일반적으로 
*/
label[for="modal-switch"] {
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 1.3rem;
  right: 1rem;
  width: 40px;
  height: 40px;
  cursor: pointer;
  /* background: red; */
}

label[for="modal-switch"]:before {
  content: "⚑";
  font-size: 2rem;
  cursor: pointer;
}

#modal-switch:checked ~ label[for="modal-switch"]:before {
  color: dodgerblue;
}

/* 스크린리더, SEO 등의 이유로 display: none; 이나
width: 0; 등의 사용은 피했습니다. */
/* 추가적으로 안보이게 하는 방법은 position left 값을 마이너스 큰 값을 사용해서 밀어버릴 수도 있고 */
/* 클립패스 같은걸로 잘라내서 마스크처럼 안보이게 할 수도 있다. */
#modal-switch,
label[for="modal-switch"] span {
  overflow: hidden;
  position: absolute;
  width: 1px;
  height: 1px;
  opacity: 0;
}

@media (min-width: 1024px) {
  .page {
    display: flex;
    flex-wrap: wrap;
  }

  .header {
    width: 100%;
  }

  .menu {
    width: 100%;
  }

  .secondary {
    width: 20%;
  }

  .secondary-a {
    order: 1;
  }

  .secondary-b {
    order: 3;
  }

  .primary {
    width: 60%;
    order: 2;
  }

  /* 
    footer에 order을 주지 않으면 기본값은 0이라서
    order를 준 클래스보다 앞선다. 
  */
  .footer {
    order: 4;
    width: 100%;
  }
}

@media (min-width: 1400px) {
  .primary {
    /* 이 방법을 사용해서 비율을 유지할 수 있다. */
    width: calc(100% - 600px);

    /* 위와 같이 width의 calc를 사용해서 width 정렬을 할 수도 있지만 flex의 flex-grow를 사용해서 폭 조정을 할 수 도 있다. */
    /* 물론 이렇게 하는 방법도 있지만 width를 사용하면 정확하게 고정적으로 유지시켜주는데 flex는 일정크기 이상이 늘어나게 된다면 밑으로 내려가게 된다. */
    /* 아래는 flex: 1 1 auto; 와 같다.  */
    /* flex: auto;  */
  }

  .secondary {
    width: 300px;
  }
}
